USE amazon_db;

-----------------------------
-- Business Problems
-- Advanced Analysis
-----------------------------

-- 1. Top selling products
-- query the top 10 products by total sales value
-- challange: include product name, total quantity sold, and total sales values

SELECT
	orders.order_id,
    product.product_name,
	SUM(order_item.quantity) AS total_quantity_sold,
    ROUND(SUM(order_item.quantity) * product.price, 2) AS total_sales_value
FROM orders
JOIN order_item ON orders.order_id = order_item.order_id
JOIN product ON order_item.product_id = product.product_id
GROUP BY 1, 2
ORDER BY 4 DESC;

-- 2. Revenue by category
-- calculate total revenue generated by each product category
-- challenge: include the precentage contribution of each category to total revenue
-- columns should include category_id category_name total_revenue total_contribution

SELECT 
	category.category_id,
    category.category_name,
    ROUND(SUM(order_item.price), 2) AS total_sale_per_category,
    ROUND((SUM(order_item.price) / (SELECT SUM(order_item.price) FROM order_item)) * 100, 2) AS total_contribution 
FROM order_item 
JOIN product ON order_item.product_id = product.product_id
JOIN category ON product.category_id = category.category_id
GROUP BY 1, 2
ORDER BY 4;

-- 3. Average order value (AOV)
-- compute the average order value for each customer
-- challange: include only customers with more than 5 orders

SELECT 
	customer.customer_id,
    CONCAT(customer.first_name, ' ', customer.last_name) AS full_name,
    SUM(order_item.price) AS total_revenue_per_customer,
    SUM(order_item.price) / COUNT(orders.order_id) AS aov
FROM orders
JOIN order_item ON orders.order_id = order_item.order_id
JOIN customer ON orders.customer_id = customer.customer_id
GROUP BY 1
HAVING COUNT(orders.order_id) > 5
ORDER BY 3;

-- 4. Monthly sales trend
-- query monthly total sales over the past year
-- challange: display the sales trend, grouping by month, return current_month sale, 
-- number of sales last month

SELECT
	MONTH(order_date) AS month,
    COUNT(orders.order_id) AS current_month_sale,
    LAG(COUNT(orders.order_id), 1) OVER(ORDER BY MONTH(order_date)) AS sales_last_month
FROM orders
WHERE order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 Year)
GROUP BY 1
ORDER BY 2;

-- another approach is to remove the lag function out so that query becomes more readable
WITH monthly_sales AS (
    SELECT
        MONTH(order_date) AS month,
        COUNT(orders.order_id) AS current_month_sale
    FROM orders
    WHERE order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) -- Corrected date condition
    GROUP BY MONTH(order_date)
)
SELECT
    month,
    current_month_sale,
    LAG(current_month_sale, 1) OVER(ORDER BY month) AS sales_last_month
FROM monthly_sales
ORDER BY month;


-- 5.Customers with no purchases
-- find customers who have registered but never placed an order
-- challange: list customer details and the time since their registration
-- skip the registration date because we don't have that attribute in the customer table

SELECT
	customer.customer_id,
    CONCAT(customer.first_name, ' ', customer.last_name) AS customer_name,
    orders.order_id
FROM orders
RIGHT JOIN customer ON orders.customer_id = customer.customer_id
WHERE customer.customer_id NOT IN (SELECT DISTINCT customer_id FROM orders);

-- efficient approach

SELECT 
	customer.*
FROM customer 
LEFT JOIN orders ON customer.customer_id = orders.customer_id
WHERE orders.order_id IS NULL;

-- 6. Best selling categories by state
-- identify the best-selling product category for each state
-- challange: include the total sales for that category within each state

SELECT 
	customer.state,
    category.category_id,
    category.category_name,
    COUNT(*) AS total_sales,
    RANK() OVER(PARTITION BY customer.state ORDER BY COUNT(*) DESC) AS statewide_rank
FROM customer
JOIN orders ON customer.customer_id = orders.customer_id
JOIN order_item ON orders.order_id = order_item.order_id
JOIN product ON order_item.product_id = product.product_id
JOIN category ON product.category_id = category.category_id
GROUP BY 1, 2, 3
ORDER BY 1, 5;


-- 7. Customer lifetime value (CLTV)
-- calculate the total value of orders placed by each customer ovr their lifetime
-- challenge: rank customers based on their city

SELECT
	customer.customer_id,
    customer.state,
    SUM(order_item.price) AS total_value,
    RANK() OVER(PARTITION BY customer.state ORDER BY SUM(order_item.price) DESC) AS statewide_rank
FROM customer
JOIN orders ON customer.customer_id = orders.customer_id
JOIN order_item ON orders.order_id = order_item.order_id
GROUP BY 1, 2
ORDER BY 2, 4;

-- 8. Inventory stock alerts
-- query products with stock levels below a certain threshold (less than 10 units)
-- challenge: include last restock date and warehouse information








